lines = open('24-164.txt').readlines()

# функция возвращает словарь (пара ключ - значение) с каждой встретившейся буквой в виде ключа и с "частотой ее встречания" в виде значения
def getLettersCountHashmap(strip: str) -> dict:
    # на всякий случай убираем переход к новой строке
    strip = strip.replace('\n', '')
    lettersHashmap = {}
    # итерируем каждый символ в 1й строке
    for i in range(len(strip)-1):
        # добавляем/обновляем значение каждой встретившейся буквы если она стоит после 'X' 
        if strip[i] == 'X':

            lettersHashmap[
                strip[i+1]
            ] = lettersHashmap.get(strip[i+1], 0) + 1    
            # в функции .get() второй аргумент - стандартное (дефолтное) значение если до момента этого ключа (буквы) в словаре не было
    return lettersHashmap
        
letters = []
for _ in lines:
    # создаем отдельный массив (как указано в условии), где будут храниться все встретившиеся буквы после 'X' 
    lettersInEach = []

    hm = getLettersCountHashmap(_)

    # находим максимально количество повторяющейся буквы (.values() - возвращает все значения словаря в виде списка)
    maxLetterCount = max(hm.values())

    # итерируем все ключи (буквы) в полученном нами выше словаре
    for key in hm:
        # добавляем в массив (промежуточный) букву, количество встречаемости которой соответствует максимальному количеству повторяющейся буквы
        # эта операция позволяет добавить 2 буквы в массив если они обе встретились одинаковое кол-во раз
        if hm[key] == maxLetterCount: 
            lettersInEach.append(key)

    # добавляем наш промежуточный массив в глобальный
    letters.extend(lettersInEach)

# Массив со всеми буквами английского алфавита (можно записать как ['A','B', 'C' ...] без map и лямбда функции или импортировать встроенную библиотеку)
# Можно воспринимать следущую строку как массив: ['A','B', 'C' ...] и т.д.
AllASCIILetters = list(map(lambda _: _.upper(), ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))

ml = 0
# итерируем все буквы английского алфавита, чтобы найти какая буква попалась больше всего раз в вышедобавленном массиве 'letters' и сколько раз она там попалась
for _ in AllASCIILetters:
    ml = max(
        ml,
        letters.count(_)
    )

print(ml)